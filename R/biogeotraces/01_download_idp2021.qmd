---
title: "Download GEOTRACES IDP 2021v2 from Simons CMAP"
subtitle: "BioGEOTRACES workflow"
author: "Shane Hogle"
date: today
abstract: "Code in this notebook downloads entire datasets from [Simons CMAP](https://simonscmap.com/) and stores them locally in the parquet format which is readable by the [Apache Arrow C++ library](https://arrow.apache.org/) via the R package [`arrow`](https://arrow.apache.org/docs/r/) to allow for fast data access without serialization overhead. This allows us to efficiently work with big data that is too large to fit into working memory - e.g., the entire GEOTRACES IDP2020v1 or the biogeochemical output of PiSCES model."
---

# Setup

This code loads required libraries and sets global variables

```{r}
#| output: false
library(tidyverse)
library(readxl)
library(here)
library(cmap4r)
library(arrow)
library(sf)
library(polars)
```

# CMAP Database

**Source:**

-   <https://simonscmap.com/>

**Reference:**

-   Ashkezari MD, Hagen NR, Denholtz M, Neang A, Burns TC, Morales RL, Lee CP, Hill CN, Armbrust EV. 2021. Simons Collaborative Marine Atlas Project (Simons CMAP ): An open‐source portal to share, visualize, and analyze ocean data. Limnol Oceanogr Methods 19:488–496. <https://doi.org/10.1002/lom3.10439>

## API authorization to CMAP SQL database

The api key is stored locally (not git tracked) in `_notrack/cmap_api.txt`

```{r}
#| echo: true
#| eval: false
#| output: false
cmap4r::set_authorization(reset = TRUE)
cmap4r::set_authorization(cmap_key = "")
```

## Simons CMAP catalog

Download a local copy of the CMAP catalog. Useful for querying later...

```{r}
#| echo: true
#| eval: false
#| output: false
local_cat <- cmap4r::get_catalog() %>%
  select(Variable, Table_Name, Unit, Sensor, Unit)

write_tsv(local_cat, here::here("_data_raw", "cmap", "cmap_catalog.tsv"))
```

```{r}
#| echo: false
#| eval: true
#| output: false
local_cat <- read_tsv(here::here("_data_raw", "cmap", "cmap_catalog.tsv"))
```

# GEOTRACES Intermediate Data Product 2021 version 2

From the [GEOTRACES program](https://www.bodc.ac.uk/geotraces/):

> GEOTRACES is an international programme which aims to improve our understanding of biogeochemical cycles and large-scale distribution of trace elements and their isotopes (TEIs) in the marine environment. The global field programme will run for at least a decade and will involve cruises in all ocean basins run by a variety of nations. Planning has involved scientists from around 30 countries. GEOTRACES is expected to become the largest programme to focus on the chemistry of the oceans and will improve our understanding of past, present and future distributions of TEIs and their relationships to important global processes.

Previously the GEOTRACES IDP 2017 was released under a more rescritive license that prohibited redistributing of the data. Now the [GEOTRACES Intermediate Data Product 2021 (Version 2)](https://www.bodc.ac.uk/geotraces/data/idp2021/) has been released under a more permissing CC4.0 license, which allows redistribution of the data. However, end users are strongly recommend to contact the orginal data generating authors about collaboration. For proper attribution:

*GEOTRACES Citation:*

> If the data sets are used in a presentation or publication then we ask that you acknowledge the source. This should be of the form: GEOTRACES Intermediate Data Product Group (2023). The GEOTRACES Intermediate Data Product 2021v2 (IDP2021v2). NERC EDS British Oceanographic Data Centre NOC. doi:10.5285/ff46f034-f47c-05f9-e053-6c86abc0dc7e .

The sequencing data we use here comes from the publications:

*Metagenome sequencing*

> Biller, S., Berube, P., Dooley, K. et al. Marine microbial metagenomes sampled across space and time. Sci Data 5, 180176 (2018). [doi:10.1038/sdata.2018.176](https://doi.org/10.1038/sdata.2018.176)

*Single cell genome sequencing*

> Berube, P., Biller, S., Hackl, T. et al. Single cell genomes of Prochlorococcus, Synechococcus, and sympatric microbes from diverse marine environments. Sci Data 5, 180154 (2018). [doi:10.1038/sdata.2018.154](https://doi.org/10.1038/sdata.2018.154)

## CMAP catalog

Lots of variables associated with these datasets

```{r}
local_cat %>%
  filter(Table_Name %in% c("tblGeotraces_Sensor", "tblGeotraces_Seawater_IDP2021v2"))
```

## GEOTRACES sensor data

Here we are just downloading the entire dataset and not restricting by time, depth, or coordinates

```{r}
#| echo: true
#| eval: false
#| output: false
gt_sens <- cmap4r::get_spacetime(
  tableName = "tblGeotraces_Sensor",
  varName = "*",
  dt1 = "2006-07-13",
  dt2 = "2018-11-22",
  lat1 = -90,
  lat2 = 90,
  lon1 = -180,
  lon2 = 180
)

arrow::write_parquet(gt_sens, here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Sensor.parquet"))
```

## GEOTRACES seawater chemical measurements

Again, we are just downloading the entire dataset and not restricting by time, depth, or coordinates

```{r}
target_vars <- local_cat %>% 
  dplyr::filter(Table_Name == "tblGeotraces_Seawater_IDP2021v2") %>%
  tibble::rownames_to_column() %>% 
  pull(Variable)
```

There seems to be a limit to the number of variables you can request at once (about 300 from what I can tell). Therefore, we will need to access this data in 300 column chunks. Also you cannot specify multiple variables using the `get_spacetime()` function so we have to write a manual SQL query

```{r}
target_vars_split <- split(target_vars[45:length(target_vars)], ceiling(seq_along(target_vars[45:length(target_vars)])/200))
```

Set up the manual SQL query

```{r}
target_queries_split <- map(target_vars_split, \(x) paste0("SELECT [time], lat, lon, ", paste(c(target_vars[1:45], x), collapse = ', '), " FROM tblGeotraces_Seawater_IDP2021v2 WHERE [time] BETWEEN '2006-07-13' AND '2018-11-22' AND lat BETWEEN -90 AND 90 AND lon BETWEEN -180 AND 180"))
```

Perform the SQL query to Simons CMAP remote. Once we get these data frames then we write them locally as Apache Arrow parquet format

```{r}
#| echo: true
#| eval: false
#| output: false
gt_sw_01 <-  cmap4r::exec_manualquery(target_queries_split[[1]])
arrow::write_parquet(gt_sw_01, here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part01.parquet"))

gt_sw_02 <-  cmap4r::exec_manualquery(target_queries_split[[2]])
arrow::write_parquet(gt_sw_02, here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part02.parquet"))

gt_sw_03 <-  cmap4r::exec_manualquery(target_queries_split[[3]])
arrow::write_parquet(gt_sw_03, here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part03.parquet"))

gt_sw_04 <-  cmap4r::exec_manualquery(target_queries_split[[4]])
arrow::write_parquet(gt_sw_04, here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part04.parquet"))

gt_sw_05 <-  cmap4r::exec_manualquery(target_queries_split[[5]])
arrow::write_parquet(gt_sw_05, here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part05.parquet"))

gt_sw_06 <-  cmap4r::exec_manualquery(target_queries_split[[6]])
arrow::write_parquet(gt_sw_06, here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part06.parquet"))
```

Now we want to combine these datasets back together into a single object that we can save and use later. Basically we need to do a bunch of chained left_joins. We will use the polars library R api for this because it is fast.

```{r}
joincols <- c("time", "lat", "lon", "N_SAMPLES", "N_STATIONS", "cruise_id",
              "station_id", "station_type", "Bot__Depth",
              "Operator_s_Cruise_Name", "Ship_Name", "Period",
              "Chief_Scientist", "GEOTRACES_Scientist", "Cruise_Aliases",
              "Cruise_Information_Link", "BODC_Cruise_Number",
              "CTDPRS_T_VALUE_SENSOR", "CTDPRS_T_VALUE_SENSOR_qc",
              "DEPTH_SENSOR", "DEPTH_SENSOR_qc", "Rosette_Bottle_Number",
              "Rosette_Bottle_Number_qc", "GEOTRACES_Sample_ID",
              "GEOTRACES_Sample_ID_qc", "Bottle_Flag", "Bottle_Flag_qc",
              "Cast_Identifier", "Cast_Identifier_qc", "Sampling_Device",
              "Sampling_Device_qc", "BODC_Bottle_Number",
              "BODC_Bottle_Number_qc", "BODC_Event_Number",
              "BODC_Event_Number_qc", "Single_Cell_ID", "Single_Cell_ID_qc",
              "NCBI_Single_Cell_Genome_BioProject_Accession",
              "NCBI_Single_Cell_Genome_BioProject_Accession_qc")

dropcols <- c("NCBI_Metagenome_BioSample_Accession",
              "NCBI_Metagenome_BioSample_Accession_qc",
              "NCBI_16S_18S_rRNA_gene_BioSample_Accession",
              "NCBI_16S_18S_rRNA_gene_BioSample_Accession_qc",
              "EMBL_EBI_Metagenome_MGNIFY_Analysis_Accession",
              "EMBL_EBI_Metagenome_MGNIFY_Analysis_Accession_qc", 
              "CTDTMP_T_VALUE_SENSOR", 
              "CTDTMP_T_VALUE_SENSOR_qc", 
              "CTDSAL_D_CONC_SENSOR")
```

```{r}
#| echo: true
#| eval: false
#| output: false
gt_sw_01 <- pl$scan_parquet(here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part01.parquet"))
gt_sw_02 <- pl$scan_parquet(here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part02.parquet"))
gt_sw_03 <- pl$scan_parquet(here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part03.parquet"))
gt_sw_04 <- pl$scan_parquet(here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part04.parquet"))
gt_sw_05 <- pl$scan_parquet(here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part05.parquet"))
gt_sw_06 <- pl$scan_parquet(here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2-part06.parquet"))

# now using polars syntax
gt_sw <- gt_sw_01$join(
  gt_sw_02,
  on = joincols,
  how = "left"
)$drop(dropcols)$join(
  gt_sw_03,
  on = joincols,
  how = "left"
)$drop(dropcols)$join(
  gt_sw_04,
  on = joincols,
  how = "left"
)$drop(dropcols)$join(
  gt_sw_05,
  on = joincols,
  how = "left"
)$drop(dropcols)$join(
  gt_sw_06,
  on = joincols,
  how = "left"
)$collect()

# write the final combined data set in parquet format
arrow::write_parquet(as.data.frame(gt_sw), 
                     here::here("_data_raw", "cmap", "geotraces", "tblGeotraces_Seawater_IDP2021v2.parquet"))
```
