---
title: "Download Darwin Biogeochemical model output from Simons CMAP"
subtitle: "Tara Oceans workflow"
author: "Shane Hogle"
date: today
abstract: "Code in this notebook downloads Darwin model outputs from [Simons CMAP](https://simonscmap.com/) and stores them locally in the parquet format which is readable by the [Apache Arrow C++ library](https://arrow.apache.org/) via the R package [`arrow`](https://arrow.apache.org/docs/r/) to allow for fast data access without serialization overhead. This allows us to efficiently work with big data that is too large to fit into working memory - e.g., the entire GEOTRACES IDP2020v1 or the biogeochemical output of PiSCES model."
---

# Setup

This code loads required libraries and sets global variables

```{r}
#| output: false
library(tidyverse)
library(readxl)
library(here)
library(arrow)
```

# CMAP Database

**Source:**

-   <https://simonscmap.com/>

**Reference:**

-   Ashkezari MD, Hagen NR, Denholtz M, Neang A, Burns TC, Morales RL, Lee CP, Hill CN, Armbrust EV. 2021. Simons Collaborative Marine Atlas Project (Simons CMAP ): An open‐source portal to share, visualize, and analyze ocean data. Limnol Oceanogr Methods 19:488–496. <https://doi.org/10.1002/lom3.10439>

## API authorization to CMAP SQL database

The api key is stored locally (not git tracked) in `_notrack/cmap_api.txt`

```{r}
#| echo: true
#| eval: false
#| output: false
library(cmap4r)
cmap4r::set_authorization(reset = TRUE)
cmap4r::set_authorization(cmap_key = "")
```

## Simons CMAP catalog

Download a local copy of the CMAP catalog. Useful for querying later...

```{r}
#| echo: true
#| eval: false
#| output: false
local_cat <- cmap4r::get_catalog() %>%
  select(Variable, Table_Name, Unit, Sensor, Unit)

write_tsv(local_cat, here::here("_data_raw", "cmap", "cmap_catalog.tsv"))
```

```{r}
#| echo: false
#| eval: true
#| output: false
local_cat <- read_tsv(here::here("_data_raw", "cmap", "cmap_catalog.tsv"))
```

<http://darwinproject.mit.edu/>

> "The Darwin Project is an initiative to advance the development and application of novel models of marine microbes and microbial communities, identifying the relationships of individuals and communities to their environment, connecting cellular-scale processes to global microbial community structure."

```{r}
local_cat %>% 
  filter(stringr::str_detect(Table_Name, "(?i)darwin")) %>% 
  distinct(Table_Name)
```

# Prepare for CMAP queries

*Note:* These data sets are too big to download from CMAP at once using the provided API because it must read the full data set into memory before writing and the data set size well exceeds the amount of RAM I have on my computer. Therefore, we will first partition Tara samples into their constituent samples/coordinates/times and for each sample we will query the CMAP SQL database for a narrow coordinate range and date range, but the full depth range.

Later we will then subset for the closest depth, coordinate, and time for each sample from each respective program. Then we will combine all these samples into a final data product that we can save for later access.

Read Tara coordinates data.

```{r}
# data from ncbi
tara_biosamples <- readr::read_tsv(here::here("data", "tara", "pangaea", "ncbi_mapped_pangaea_barcode.tsv"))

# data from pangaea
PANGAEA_842237 <- arrow::read_parquet(here::here("_data_raw", "tara", "pangaea", "PANGAEA_842237.parquet"))
PANGAEA_875575 <- arrow::read_parquet(here::here("_data_raw", "tara", "pangaea", "PANGAEA_875575.parquet"))
```

This code matches Tara samples coordinates to the nearest grid coordinate in the Darwin output

```{r}
tara2darwin <- left_join(tara_biosamples, PANGAEA_875575, by = join_by(tara_barcode_num, tara_station)) %>%
  left_join(PANGAEA_842237, by = join_by(tara_station)) %>% 
  mutate(depth = if_else(is.na(depth), (depth_min+depth_max)/2, depth)) %>% 
  dplyr::select(tara_barcode_num, tara_station, latitude, longitude, date_time, depth) %>% 
  mutate(date_time = lubridate::as_date(stringr::str_extract(date_time, "^\\d{4}-\\d{2}-\\d{2}"))) %>% 
  distinct() %>% 
  rowwise() %>% 
  mutate(lat1 = floor(first(latitude[order(latitude)])),
         lat2 = ceiling(last(latitude[order(latitude)])),
         lon1 = floor(first(longitude[order(longitude)])),
         lon2 = ceiling(last(longitude[order(longitude)])),
         dt1 = floor_date(date_time, 'month'),
         dt2 = ceiling_date(date_time, 'month')) %>% 
  ungroup() 

# make nested dataset for initial CMAP query
tara2darwin_nest <- tara2darwin %>% 
  dplyr::select(tara_station, latitude, longitude, date_time, lat1, lat2, lon1, lon2, dt1, dt2) %>%  
  distinct() %>% 
  tidyr::nest(dw_query = -tara_station)
```

# Darwin Biogeochemistry 3 Day Averaged model output

> This dataset contains 3-day averaged model nutrient outputs for the global ocean at 50 depth levels. This version of the model is modified from [Dutkiewicz et al. (2015)](https://bg.copernicus.org/articles/12/4447/2015/) and [Ward et al. (2012)](https://doi.org/10.4319/lo.2012.57.6.1877). It includes the biogeochemical cycling of carbon, nitrogen, phosphorus, silica, iron and oxygen, a complex marine ecosystem, incorporating both functional and size diversity of phytoplankton and zooplankton, as well as dissolved organic matter (including an explicit colored component, CDOM), and organic particulate matter. An explicit radiative transfer component and spectral treatment of irradiance provides output that is similar to data provided by ocean color satellite instruments (surface reflectance) and also subsurface optical characteristics such as absorption and scattering. There are 35 phytoplankton types (2 pico-prokaryotes, 2 pico-eukaryotes, 5 coccolithophore, 5 diazotrophs, 11 diatoms, 10 mixotrophic dinoflagellates) and 16 zooplankton types ranging from 0.6µm to 2500 µm equivalent spherical diameter. Parameters influencing growth, grazing, and sinking are related to size (following [Ward et al. (2012)](https://doi.org/10.4319/lo.2012.57.6.1877)) with specific differences between functional groups. This simulation uses Monod kinetics, and C:N:P:Fe stoichiometry are constant over time (though do differ between different phytoplankton groups). The zooplankton preferentially graze on plankton 10 times smaller than themselves with a Holling III function. The distributions of the plankton in this model compare well with both observations based on functional types as well as size distributions. We have incorporated distinct absorption and scattering spectra for the different phytoplankton (as in [Dutkiewicz et al. (2015)](https://bg.copernicus.org/articles/12/4447/2015/)) as well as flattening of the spectra with size for absorption and scattering. In Darwin_v0.2_cs510, this ecosystem model is driven by the physical ocean model of [Menemenlis et al 2008](https://www.mercator-ocean.eu/wp-content/uploads/2015/06/lettre_31_en.pdf) (ECCO2). The grid is a cubed sphere with nominal resolution of 18km such that it is “eddy-permitting” in that it captures eddies and fronts at the mesoscale (order 100km), but not at the sub-mesoscale (order 10kms). Results here have been interpolated to a 0.5 degree grid. The ECCO2 synthesis covers the period 1992– 2015. The physical solution has been obtained using a data constrained Green's Function approach to estimate initial temperature and salinity conditions, surface boundary conditions, and several empirical ocean and sea ice model parameters. The control parameters include initial temperature and salinity conditions, atmospheric surface boundary conditions, background vertical diffusivity, critical Richardson numbers for the KPP scheme, air-ocean, ice-ocean, air-ice drag coefficients, ice/ocean/snow albedo coefficients, bottom drag, and vertical viscosity. Data constraints include sea level anomaly from altimeter data, time- mean sea level, sea surface temperature, temperature, and salinity profiles from WOCE, TAO, ARGO, XBT, etc., sea ice concentration from passive microwave data, sea ice motion from radiometers, QuikSCAT, and RGPS, and sea ice thickness from ULS. Full depth biogeochemical solutions at native eddying resolutions are available via OpenDAP.

## tblDarwin_Nutrient

Source: <https://simonscmap.com/catalog/datasets/Darwin_Nutrient>

### Download full query range

```{r}
#| echo: true
#| eval: false
#| output: false
tara_tblDarwin_Nutrient <- tara2darwin_nest %>%
  dplyr::mutate(tbl = purrr::map(
    dw_query,
    purrr::slowly(
      function(df)
        cmap4r::get_spacetime(
          tableName = 'tblDarwin_Nutrient',
          varName = '*',
          dt1 = as.character(df$dt1),
          dt2 = as.character(df$dt2),
          lat1 = df$lat1,
          lat2 = df$lat2,
          lon1 = df$lon1,
          lon2 = df$lon2
        ),
      rate = rate_delay(3),
      quiet = TRUE
    ),
    .progress = TRUE
  ))

tara_tblDarwin_Nutrient %>% 
  unnest(c(tbl, dw_query)) %>%
  dplyr::rename(depth_dw = depth, lat_dw=lat, lon_dw=lon, time_dw=time) %>% 
  dplyr::relocate(tara_station, lat_dw, lon_dw, depth_dw, time_dw) %>% 
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Nutrient_subset.parquet"))
```

### Filter to closest Tara matches

Filtering Darwin output to only closest matching time, distance, and depth. Difference in times are computed using `lubridate` package. Distance between two coordinate sets is calculated by the Haversine distance implemented by `geosphere::distHaversine`. Distance between depths is calculated as a simple difference.

There are two special considerations:

1)  Some Tara stations are close to land and picking grid points with minimum Haversine distance to the Tara coordinates will end up selecting positions on land. We include a filtering criteria to exclude all Tara grid points that contain only NA values for DIN/PO4/SiOH4 for all depths.

2)  Tara station TARA_209 is located off of Greenland on the shelf. The sampling depth for the mesopelagic samples is listed as 351 meters. However, in Pangaea datasets the bathymetry depth for this coordinate set is 215 meters. In Darwin (and PISCES) there are no observations at 351 meters, so we instead choose the minimum depth difference between 351 meters and the model depth level with a DIN/PO4/SiOH4 value/.

```{r}
tblDarwin_Nutrient_subset_filt <- arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Nutrient_subset.parquet")) %>% 
  dplyr::mutate(time_dw = lubridate::as_date(stringr::str_extract(time_dw, "^\\d{4}-\\d{2}-\\d{2}"))) %>% 
  # calculate difference in date between darwin and Tara
  dplyr::mutate(tdiff = abs(time_dw - date_time)) %>% 
  dplyr::group_by(tara_station, latitude, longitude, date_time) %>% 
  # filter to include only darwin time points with smallest time difference to Tara observation 
  dplyr::filter(tdiff == min(tdiff)) %>% 
  dplyr::ungroup() %>% 
  # remove Darwin grid coords that only contain NA values for DIN (these are either on land or ice)
  dplyr::group_by(tara_station, lat_dw, lon_dw, time_dw) %>% 
  dplyr::filter(sum(is.na(DIN)) != n()) %>% 
  dplyr::ungroup() %>% 
  dplyr::rowwise() %>% 
  # calculate Haversine distance (in meters) betwen darwin coord set and Tara coord set
  dplyr::mutate(ddiff = geosphere::distHaversine(c(longitude, latitude), c(lon_dw, lat_dw))) %>% 
  dplyr::group_by(tara_station, latitude, longitude, date_time) %>% 
  # filter to include only darwin grid point with smallest Haversine distance
  dplyr::filter(ddiff == min(ddiff)) %>% 
  dplyr::ungroup() %>% 
  # join back to the full dataset that includes depths for Tara samples. We expect a many2many relationship
  dplyr::left_join(tara2darwin,
                  by = join_by(tara_station, latitude, longitude, date_time, lat1, lat2, lon1, lon2, dt1, dt2),
                  relationship = "many-to-many") %>% 
  # calculate difference in magnitude between darwin depth and Tara observation
  dplyr::mutate(dpdiff = abs(depth_dw - depth)) %>% 
  # filter to only consider Darwin grid points with DIN observations
  dplyr::filter(!is.na(DIN)) %>% 
  dplyr::group_by(tara_station, latitude, longitude, date_time, depth) %>% 
  # filter to include only smallest depth difference
  dplyr::filter(dpdiff == min(dpdiff)) %>% 
  dplyr::ungroup() %>% 
  dplyr::group_by(tara_station, latitude, longitude, date_time, depth) %>% 
  # Some observations have multiple equal depth differences (e.g., target depth is 50 and nearest 
  # Darwin depths are 45 and 55) this ensures we only take one of them
  dplyr::filter(depth_dw == min(depth_dw)) %>% 
  dplyr::ungroup() %>% 
  # recording the difference between Darwin grid point and Tara coords, difference between depths and times
  dplyr::mutate(tdiff = lubridate::make_difftime(tdiff, units = "hours"),
                ddiff = ddiff/1000) %>% 
  dplyr::rename(time_diff_hr = tdiff, dist_diff_km = ddiff, depth_diff_m = dpdiff ) %>% 
  # some formatting and cleaning
  dplyr::relocate(tara_barcode_num, tara_station:longitude, depth, date_time, 
                  lat_dw, lon_dw, depth_dw, time_dw, dist_diff_km, depth_diff_m, time_diff_hr) %>% 
  dplyr::select(-(lat1:dt2)) 

# write output for later
arrow::write_parquet(tblDarwin_Nutrient_subset_filt, here::here("data", "tara", "darwin_subsets", "tblDarwin_Nutrient_subset_filt.parquet"))
```

### Save closest Darwin grid coords

Write 0.25 degree resolved coordinates for later access to Darwin without needing a 1 degree range. It is faster to use exact coords in the API

```{r}
darwin_tara_grid_map <- tblDarwin_Nutrient_subset_filt %>% 
  dplyr::select(tara_station:time_diff_hr) %>% 
  distinct() 

arrow::write_parquet(darwin_tara_grid_map, here::here("data", "tara", "darwin_subsets", "darwin_tara_grid_map.parquet"))
```

### Save closest PISCES grid coords

Write 0.25 degree resolved coordinates for later access to PISCES. We'll use these in the next notebook

```{r}
tblDarwin_Nutrient_subset_filt %>% 
  # the only reason I know to set this to 200 is by looking at PISCES output from this grid coords and seeing that 
  # the maximum depth was 199 meters
  mutate(depth = if_else(tara_station == "TARA_209" & depth == 351, 200, depth)) %>% 
  dplyr::select(tara_station, lat_cm=lat_dw, latitude, lon_cm=lon_dw, longitude, depth, date_time, dist_diff_km) %>% 
  distinct() %>% 
  readr::write_csv(here::here("data", "tara", "pisces_subsets", "pisces_tara_grid_map.csv"))
```

## tblDarwin_Ecosystem

Source: <https://simonscmap.com/catalog/datasets/Darwin_Ecosystem>

Now we can use the exact coordinates and dates in our SQL queries to CMAP so that we reduce the amount of data needed to transfer. This version of the variable `tara2darwin_nest` has the best mapping (i.e. smallest Haversine distance) between the Tara coordinate and the grid in MIT Darwin.

```{r}
darwin_tara_grid_map <- arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "darwin_tara_grid_map.parquet"))

tara2darwin_nest <- darwin_tara_grid_map %>%
  dplyr::select(tara_station, lat_dw, lon_dw, time_dw) %>% 
  distinct() %>% 
  tidyr::nest(dw_query = -tara_station)
```

### Download

```{r}
#| echo: true
#| eval: false
#| output: false
tara_tblDarwin_Ecosystem <- tara2darwin_nest %>%
  dplyr::mutate(tbl = purrr::map(
    dw_query,
    purrr::slowly(
      function(df)
        cmap4r::get_spacetime(
          tableName = 'tblDarwin_Ecosystem',
          varName = '*',
          dt1 = as.character(df$time_dw),
          dt2 = as.character(df$time_dw),
          lat1 = df$lat_dw,
          lat2 = df$lat_dw,
          lon1 = df$lon_dw,
          lon2 = df$lon_dw
        ),
      # using a 3 second rate delay between calls
      rate = rate_delay(3),
      quiet = TRUE
    ),
    .progress = TRUE
  ))

tara_tblDarwin_Ecosystem %>% 
  unnest(c(tbl)) %>% 
  dplyr::rename(time_dw = time, lat_dw = lat, lon_dw = lon, depth_dw = depth) %>% 
  dplyr::select(-dw_query) %>% 
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Ecosystem_subset.parquet"))
```

### Filtering

Filtering Darwin output to only closest matching depth. Distance between depths is calculated as a simple difference.

```{r}
left_join(darwin_tara_grid_map,
          arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Ecosystem_subset.parquet")),
          by = join_by(tara_station, lat_dw, lon_dw, depth_dw, time_dw)) %>% 
  dplyr::left_join(tara2darwin, by = join_by(tara_station, latitude, longitude, depth, date_time)) %>% 
  dplyr::relocate(tara_barcode_num, tara_station, latitude, longitude, depth, date_time, lat_dw, lon_dw, depth_dw, time_dw) %>% 
  dplyr::select(-dist_diff_km, -depth_diff_m, -time_diff_hr, -lat1, -lat2, -lon1, -lon2, -dt1, -dt2) %>% 
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Ecosystem_subset_filt.parquet"))
```

## tblDarwin_Ocean_Color

Source: <https://simonscmap.com/catalog/datasets/Darwin_Ocean_Color>

```{r}
darwin_tara_grid_map <- arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "darwin_tara_grid_map.parquet"))

tara2darwin_nest <- darwin_tara_grid_map %>%
  dplyr::select(tara_station, lat_dw, lon_dw, time_dw) %>% 
  distinct() %>% 
  tidyr::nest(dw_query = -tara_station)
```

### Download

```{r}
#| echo: true
#| eval: false
#| output: false
tara_tblDarwin_Ocean_Color <- tara2darwin_nest %>%
  dplyr::mutate(tbl = purrr::map(
    dw_query,
    purrr::slowly(
      function(df)
        cmap4r::get_spacetime(
          tableName = 'tblDarwin_Ocean_Color',
          varName = '*',
          dt1 = as.character(df$time_dw),
          dt2 = as.character(df$time_dw),
          lat1 = df$lat_dw,
          lat2 = df$lat_dw,
          lon1 = df$lon_dw,
          lon2 = df$lon_dw
        ),
      rate = rate_delay(3),
      quiet = TRUE
    ),
    .progress = TRUE
  ))

tara_tblDarwin_Ocean_Color %>%
  unnest(c(tbl)) %>% 
  dplyr::rename(time_dw = time, lat_dw = lat, lon_dw = lon, depth_dw = depth) %>% 
  dplyr::select(-dw_query) %>% 
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Ocean_Color_subset.parquet"))
```

### Filtering

Filtering Darwin output to only closest matching depth. Distance between depths is calculated as a simple difference.

```{r}
left_join(darwin_tara_grid_map,
          arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Ocean_Color_subset.parquet")),
          by = join_by(tara_station, lat_dw, lon_dw, depth_dw, time_dw)) %>% 
  dplyr::left_join(tara2darwin, by = join_by(tara_station, latitude, longitude, depth, date_time)) %>% 
  dplyr::relocate(tara_barcode_num, tara_station, latitude, longitude, depth, date_time, lat_dw, lon_dw, depth_dw, time_dw) %>% 
  dplyr::select(-dist_diff_km, -depth_diff_m, -time_diff_hr, -lat1, -lat2, -lon1, -lon2, -dt1, -dt2) %>% 
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Ocean_Color_subset_filt.parquet"))
```

## tblDarwin_Phytoplankton

Source: <https://simonscmap.com/catalog/datasets/Darwin_Phytoplankton>

```{r}
darwin_tara_grid_map <- arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "darwin_tara_grid_map.parquet"))

tara2darwin_nest <- darwin_tara_grid_map %>%
  dplyr::select(tara_station, lat_dw, lon_dw, time_dw) %>% 
  distinct() %>% 
  tidyr::nest(dw_query = -tara_station)
```

### Download

```{r}
#| echo: true
#| eval: false
#| output: false
tara_tblDarwin_Phytoplankton <- tara2darwin_nest %>%
  dplyr::mutate(tbl = purrr::map(
    dw_query,
    purrr::slowly(
      function(df)
        cmap4r::get_spacetime(
          tableName = 'tblDarwin_Phytoplankton',
          varName = '*',
          dt1 = as.character(df$time_dw),
          dt2 = as.character(df$time_dw),
          lat1 = df$lat_dw,
          lat2 = df$lat_dw,
          lon1 = df$lon_dw,
          lon2 = df$lon_dw
        ),
      rate = rate_delay(3),
      quiet = TRUE
    ),
    .progress = TRUE
  ))

tara_tblDarwin_Phytoplankton %>% 
  unnest(c(tbl)) %>% 
  dplyr::rename(time_dw = time, lat_dw = lat, lon_dw = lon, depth_dw = depth) %>% 
  dplyr::select(-dw_query) %>% 
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Phytoplankton_subset.parquet"))
```

### Filtering

Filtering Darwin output to only closest matching depth. Distance between depths is calculated as a simple difference.

```{r}
left_join(darwin_tara_grid_map,
          arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Phytoplankton_subset.parquet")),
          by = join_by(tara_station, lat_dw, lon_dw, depth_dw, time_dw)) %>% 
  dplyr::left_join(tara2darwin, by = join_by(tara_station, latitude, longitude, depth, date_time)) %>% 
  dplyr::relocate(tara_barcode_num, tara_station, latitude, longitude, depth, date_time, lat_dw, lon_dw, depth_dw, time_dw) %>% 
  dplyr::select(-dist_diff_km, -depth_diff_m, -time_diff_hr, -lat1, -lat2, -lon1, -lon2, -dt1, -dt2) %>% 
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Phytoplankton_subset_filt.parquet"))
```

# MIT Darwin biogeochemical model monthly climatology output

> This version of the model is modified from [Dutkiewicz et al. (2015)](https://bg.copernicus.org/articles/12/4447/2015/) and [Ward et al. (2012)](https://doi.org/10.4319/lo.2012.57.6.1877). It includes the biogeochemical cycling of carbon, nitrogen, phosphorus, silica, iron and oxygen, a complex marine ecosystem, incorporating both functional and size diversity of phytoplankton and zooplankton, as well as dissolved organic matter (including an explicit colored component, CDOM), and organic particulate matter. An explicit radiative transfer component and spectral treatment of irradiance provides output that is similar to data provided by ocean color satellite instruments (surface reflectance) and also subsurface optical characteristics such as absorption and scattering. There are 35 phytoplankton types (2 pico-prokaryotes, 2 pico-eukaryotes, 5 coccolithophore, 5 diazotrophs, 11 diatoms, 10 mixotrophic dinoflagellates) and 16 zooplankton types ranging from 0.6µm to 2500 µm equivalent spherical diameter. Parameters influencing growth, grazing, and sinking are related to size (following [Ward et al. (2012)](https://doi.org/10.4319/lo.2012.57.6.1877)) with specific differences between functional groups. This simulation uses Monod kinetics, and C:N:P:Fe stoichiometry are constant over time (though do differ between different phytoplankton groups). The zooplankton preferentially graze on plankton 10 times smaller than themselves with a Holling III function. The distributions of the plankton in this model compare well with both observations based on functional types as well as size distributions. We have incorporated distinct absorption and scattering spectra for the different phytoplankton (as in [Dutkiewicz et al. (2015)](https://bg.copernicus.org/articles/12/4447/2015/)) as well as flattening of the spectra with size for absorption and scattering. In Darwin_v0.1_llc90, this ecosystem model is driven by the physical ocean model of [Forget et al, 2015](https://doi.org/10.5194/gmd-8-3071-2015,%202015) (ECCO version 4, <https://eccov4.readthedocs.io>) which runs on a 1-degree, global grid called LLC90 ([Forget et al, 2015](https://doi.org/10.5194/gmd-8-3071-2015,%202015)). This physical ocean model benefits from optimized parameterizations (small- and meso-scale turbulence) and atmospheric boundary conditions (air-sea fluxes). As a result, it matches in-situ observations (T, S, MLD, etc.) and remote sensing data (SST, altimetry, etc.) better than earlier ECCO solutions do (Forget, Ferreira, Liang 2015, Forget and Ponte 2015). Another advantage of this model configuration is that it is easy and inexpensive to re-run in order to produce more output or to experiment with the ecosystem and physical model settings (Forget 2018, 2019, <https://cbiomes.readthedocs.io>). Results here have been interpolated to a 0.5 degree grid.

Source: <https://simonscmap.com/catalog/datasets/Darwin-MITgcm_Climatology>

**Note:** This output is the averaged monthly climatology and only includes values averaged over the model's monthly time steps. This model output is small enough that we can download it for the entire ocean, save the product, and access it later if needed

## tblDarwin_Nutrient_Climatology

Source: <https://simonscmap.com/catalog/datasets/Darwin-MITgcm_Climatology>

### Download

```{r}
#| echo: true
#| eval: false
#| output: false
tblDarwin_Nutrient_Climatology <- cmap4r::get_spacetime(
  tableName = "tblDarwin_Nutrient_Climatology",
  varName = "*",
  dt1 = "",
  dt2 = "",
  lat1 = -90,
  lat2 = 90,
  lon1 = -180,
  lon2 = 180
)

tblDarwin_Nutrient_Climatology %>% 
  dplyr::rename(lat_dw = lat, lon_dw = lon, depth_dw = depth) %>% 
  arrow::write_parquet(here::here("_data_raw", "cmap", "darwin", "tblDarwin_Nutrient_Climatology.parquet"))
```

### Filtering

Filtering Darwin output to only closest matching depth. We use the "Tara to Darwin grid mapping" derived earlier. Distance between depths is calculated as the magnitude of their difference.

Something seriously weird is happening - I should be able to join on `depth_dw` variable in both datasets but for some cases NAs are produced when there is not missing data in the Darwin climatology data. [Note issue here](https://stackoverflow.com/questions/46487199/r-dplyr-left-join-error-missing-values-produced-when-joining-values-rounded-to) on joining by numbers. Apparently better to convert to string first?

Note: also something weird going on with TARA_206 at depth 411. In the 3-day average Darwin model these values are not missing, but they are missing in the climatology

```{r}
darwin_tara_grid_map <- arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "darwin_tara_grid_map.parquet"))

left_join(darwin_tara_grid_map,
          arrow::read_parquet(here::here("_data_raw", "cmap", "darwin", "tblDarwin_Nutrient_Climatology.parquet")),
          by = join_by(lat_dw, lon_dw),
          relationship = "many-to-many") %>%
  group_by(tara_station, lat_dw, lon_dw, depth_dw.x) %>% 
  filter(abs(depth_dw.x-depth_dw.y) == min(abs(depth_dw.x-depth_dw.y))) %>% 
  ungroup() %>% 
  dplyr::left_join(tara2darwin, by = join_by(tara_station, latitude, longitude, depth, date_time)) %>% 
  dplyr::relocate(tara_barcode_num, tara_station, latitude, longitude, depth, date_time, lat_dw, lon_dw, depth_dw.x, time_dw) %>%
  dplyr::rename(depth_dw = depth_dw.x) %>% 
  dplyr::select(-dist_diff_km, -depth_diff_m, -time_diff_hr, -lat1, -lat2, -lon1, -lon2, -dt1, -dt2) %>% 
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Nutrient_Climatology_subset_filt.parquet"))
```

## tblDarwin_Plankton_Climatology

Source: <https://simonscmap.com/catalog/datasets/Darwin-MITgcm_Climatology>

### Download

```{r}
#| echo: true
#| eval: false
#| output: false
tblDarwin_Plankton_Climatology <- cmap4r::get_spacetime(
  tableName = "tblDarwin_Plankton_Climatology",
  varName = "*",
  dt1 = "",
  dt2 = "",
  lat1 = -90,
  lat2 = 90,
  lon1 = -180,
  lon2 = 180
)

tblDarwin_Plankton_Climatology %>% 
  dplyr::rename(lat_dw = lat, lon_dw = lon, depth_dw = depth) %>% 
  arrow::write_parquet(here::here("_data_raw", "cmap", "darwin", "tblDarwin_Plankton_Climatology.parquet"))
```

### Filtering

Filtering Darwin output to only closest matching depth. We use the "Tara to Darwin grid mapping" derived earlier. Distance between depths is calculated as the magnitude of their difference.

Something seriously weird is happening - I should be able to join on `depth_dw` variable in both datasets but for some cases NAs are produced when there is not missing data in the Darwin climatology data. [Note issue here](https://stackoverflow.com/questions/46487199/r-dplyr-left-join-error-missing-values-produced-when-joining-values-rounded-to) on joining by numbers. Apparently better to convert to string first?

Note: also something weird going on with TARA_206 at depth 411. In the 3-day average Darwin model these values are not missing, but they are missing in the climatology

```{r}
darwin_tara_grid_map <- arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "darwin_tara_grid_map.parquet"))

left_join(darwin_tara_grid_map,
          arrow::read_parquet(here::here("_data_raw", "cmap", "darwin", "tblDarwin_Plankton_Climatology.parquet")),
          by = join_by(lat_dw, lon_dw),
          relationship = "many-to-many") %>%
  group_by(tara_station, lat_dw, lon_dw, depth_dw.x) %>% 
  filter(abs(depth_dw.x-depth_dw.y) == min(abs(depth_dw.x-depth_dw.y))) %>% 
  ungroup() %>% 
  dplyr::left_join(tara2darwin, by = join_by(tara_station, latitude, longitude, depth, date_time)) %>% 
  dplyr::relocate(tara_barcode_num, tara_station, latitude, longitude, depth, date_time, lat_dw, lon_dw, depth_dw.x, time_dw) %>%
  dplyr::rename(depth_dw = depth_dw.x) %>% 
  dplyr::select(-dist_diff_km, -depth_diff_m, -time_diff_hr, -lat1, -lat2, -lon1, -lon2, -dt1, -dt2) %>% 
  #filter(if_any(everything(), ~is.na(.)))
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Plankton_Climatology_subset_filt.parquet"))
```

## tblDarwin_Chl_Climatology

Source: <https://simonscmap.com/catalog/datasets/Darwin-MITgcm_Climatology>

### Download

```{r}
#| echo: true
#| eval: false
#| output: false
tblDarwin_Chl_Climatology <- cmap4r::get_spacetime(
  tableName = "tblDarwin_Chl_Climatology",
  varName = "*",
  dt1 = "",
  dt2 = "",
  lat1 = -90,
  lat2 = 90,
  lon1 = -180,
  lon2 = 180
)

tblDarwin_Chl_Climatology %>% 
  dplyr::rename(lat_dw = lat, lon_dw = lon, depth_dw = depth) %>% 
  arrow::write_parquet(here::here("_data_raw", "cmap", "darwin", "tblDarwin_Chl_Climatology.parquet"))
```

### Filtering

Filtering Darwin output to only closest matching depth. We use the "Tara to Darwin grid mapping" derived earlier. Distance between depths is calculated as the magnitude of their difference.

Something seriously weird is happening - I should be able to join on `depth_dw` variable in both datasets but for some cases NAs are produced when there is not missing data in the Darwin climatology data. [Note issue here](https://stackoverflow.com/questions/46487199/r-dplyr-left-join-error-missing-values-produced-when-joining-values-rounded-to) on joining by numbers. Apparently better to convert to string first?

Note: also something weird going on with TARA_206 at depth 411. In the 3-day average Darwin model these values are not missing, but they are missing in the climatology

```{r}
darwin_tara_grid_map <- arrow::read_parquet(here::here("data", "tara", "darwin_subsets", "darwin_tara_grid_map.parquet"))

left_join(darwin_tara_grid_map,
          arrow::read_parquet(here::here("_data_raw", "cmap", "darwin", "tblDarwin_Chl_Climatology.parquet")),
          by = join_by(lat_dw, lon_dw),
          relationship = "many-to-many") %>%
  group_by(tara_station, lat_dw, lon_dw, depth_dw.x) %>% 
  filter(abs(depth_dw.x-depth_dw.y) == min(abs(depth_dw.x-depth_dw.y))) %>% 
  ungroup() %>% 
  dplyr::left_join(tara2darwin, by = join_by(tara_station, latitude, longitude, depth, date_time)) %>% 
  dplyr::relocate(tara_barcode_num, tara_station, latitude, longitude, depth, date_time, lat_dw, lon_dw, depth_dw.x, time_dw) %>%
  dplyr::rename(depth_dw = depth_dw.x) %>% 
  dplyr::select(-dist_diff_km, -depth_diff_m, -time_diff_hr, -lat1, -lat2, -lon1, -lon2, -dt1, -dt2) %>% 
  #filter(if_any(everything(), ~is.na(.)))
  arrow::write_parquet(here::here("data", "tara", "darwin_subsets", "tblDarwin_Chl_Climatology_subset_filt.parquet"))
```
