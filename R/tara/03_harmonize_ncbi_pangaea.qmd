---
title: "Harmonize environmental data and sequencing identifiers"
subtitle: "Tara Oceans workflow"
author: "Shane Hogle"
date: today
abstract: "Code in this notebook collates environmental parameters from different Pangaea.de datasets with the NCBI sequencing datasets. It then fills missing values from Pangaea with Darwin Model output for the nearest coordinate/depth/date. Finally, a small number of observations are imputed. The goal is to be able to associate an NCBI sequencing run accession number with environmental data for later statistical analysis. We do not want any missing data so we must try and patch missing data from other sources."
---

# Setup

This code loads required libraries and sets global variables

```{r}
#| output: false
library(tidyverse)
library(here)
library(lubridate)
library(fuzzyjoin)
```

# Read data

Read NCBI BioSample data with unique Tara Ocean Barcodes 

```{r}
#| output: false
tara_biosamples <- readr::read_tsv(here::here("data", "tara", "ncbi2tara_barcode.tsv"))
```

Read previously saved environmental data and metadata downloaded from Pangaea.de

```{r}
# tara stations
PANGAEA_842237 <- readr::read_rds(here::here("_data_raw", "tara", "PANGAEA_842237.rds"))
# carbonate chemistry
PANGAEA_875567 <- readr::read_rds(here::here("_data_raw", "tara", "PANGAEA_875567.rds"))
# nutrients
PANGAEA_875575 <- readr::read_rds(here::here("_data_raw", "tara", "PANGAEA_875575.rds"))
# phytoplankton pigments
PANGAEA_875569 <- readr::read_rds(here::here("_data_raw", "tara", "PANGAEA_875569.rds"))
# CTD sensor data
PANGAEA_875576 <- readr::read_rds(here::here("_data_raw", "tara", "PANGAEA_875576.rds"))
# mesoscale features
PANGAEA_875577 <- readr::read_rds(here::here("_data_raw", "tara", "PANGAEA_875577.rds"))
# whole water column features
PANGAEA_875579 <- readr::read_rds(here::here("_data_raw", "tara", "PANGAEA_875579.rds"))
```

# Collate, filter, and harmonize environmental data

In the final metagenomic tables we are interested in the following environmental variables:

1. Density
2. Temperature
3. Salinity
4. Chlorophyll a
5. Dissolved oxygen (O2)
6. Total inorganic nitrogen (NO3 + NO2)
7. Nitrite (NO2)
8. Silica (SiO2)
9. Phosphate (PO4)
10. Total dissolved iron (FeT)

Thus we need to access the following environmental variables from various Pangaea dataframes for the final product

| Variable                                       | Dataset                            | Variable           |
|------------------------------------------------|------------------------------------|--------------------|
| Density                                        | Sensors, in situ (PANGAEA.875576)   | PANGAEA.875576_047 |
| Salinity                                       | Sensors, in situ (PANGAEA.875576)   | PANGAEA.875576_037 |
| Temperature                                    | Sensors, in situ (PANGAEA.875576)   | PANGAEA.875576_027 |
| Dissolved Oxygen                               | Sensors, in situ (PANGAEA.875576)   | PANGAEA.875576_057 |
| Chlorophyll a                                  | Sensors, in situ (PANGAEA.875576)   | PANGAEA.875576_077 |
| Dissolved inorganic nitrogen (DIN = NO3 + NO2) | Nutrients, bottles (PANGAEA.875575) | PANGAEA.875575_031 |
| Nitrite (NO2)                                  | Nutrients, bottles (PANGAEA.875575) | PANGAEA.875575_021 |
| Phosphate (PO4)                                | Nutrients, bottles (PANGAEA.875575) | PANGAEA.875575_026 |
| Silica (SiO2)                                  | Nutrients, bottles (PANGAEA.875575) | PANGAEA.875575_036 |
| Darwin Model Total dissolved Iron (FeT)        | Modeled variables (PANGAEA.875577)  | PANGAEA.875577_039 |
| Darwin Model NO2                               | Modeled variables (PANGAEA.875577)  | PANGAEA.875577_043 |
| Darwin Model DIN                               | Modeled variables (PANGAEA.875577)  | PANGAEA.875577_045 |
| Temp @ 10 meters                               | Water column (PANGAEA.875579)       | PANGAEA.875579_054 |
| Temp @ mixed layer                             | Water column (PANGAEA.875579)       | PANGAEA.875579_057 |
| Temp @ DCM                                     | Water column (PANGAEA.875579)       | PANGAEA.875579_059 |
| Salinity @ 10 meters                           | Water column (PANGAEA.875579)       | PANGAEA.875579_064 |
| Salinity @ mixed layer                         | Water column (PANGAEA.875579)       | PANGAEA.875579_067 |
| Salinity @ DCM                                 | Water column (PANGAEA.875579)       | PANGAEA.875579_069 |
| Density @ 10 meters                            | Water column (PANGAEA.875579)       | PANGAEA.875579_074 |
| Density @ mixed layer                          | Water column (PANGAEA.875579)       | PANGAEA.875579_077 |
| Density @ DCM                                  | Water column (PANGAEA.875579)       | PANGAEA.875579_079 |
| Chlorophyll a @ 10 meters                      | Water column (PANGAEA.875579)       | PANGAEA.875579_094 |
| Chlorophyll a @ mixed layer                    | Water column (PANGAEA.875579)       | PANGAEA.875579_097 |
| Chlorophyll a @ DCM                            | Water column (PANGAEA.875579)       | PANGAEA.875579_099 |
| Dissolved Oxygen @ 10 meters                   | Water column (PANGAEA.875579)       | PANGAEA.875579_104 |
| Dissolved Oxygen @ mixed layer                 | Water column (PANGAEA.875579)       | PANGAEA.875579_107 |
| Dissolved Oxygen @ DCM                         | Water column (PANGAEA.875579)       | PANGAEA.875579_109 |
| DIN @ 10 meters                                | Water column (PANGAEA.875579)       | PANGAEA.875579_114 |
| DIN @ mixed layer                              | Water column (PANGAEA.875579)       | PANGAEA.875579_117 |
| DIN @ DCM                                      | Water column (PANGAEA.875579)       | PANGAEA.875579_119 |

## Combine all Pangaea datasets with BioSamples

```{r}
tara_biosamples_joined01 <- left_join(tara_biosamples, PANGAEA_875575, by = join_by(tara_barcode_num, tara_station)) %>% 
  left_join(dplyr::select(PANGAEA_875576, tara_barcode_num, tara_station, date_time, 21:last_col()), 
            by = join_by(tara_barcode_num, tara_station)) %>% 
  left_join(dplyr::select(PANGAEA_875577, tara_barcode_num, tara_station, 21:last_col()), by = join_by(tara_barcode_num, tara_station)) %>% 
  left_join(dplyr::select(PANGAEA_875579, tara_barcode_num, tara_station, 21:last_col()), by = join_by(tara_barcode_num, tara_station)) %>% 
  left_join(dplyr::select(PANGAEA_842237, tara_station, latitude, longitude), by = join_by(tara_station))
```

## Fill missing observations with adjacent data

There are 7 cases where there is not single recorded depth for an observation, but rather a depth range (`depth_min` to `depth_max`).

```{r}
tara_biosamples_joined01 %>% 
  filter(is.na(depth)) %>% 
  distinct(tara_barcode_num, tara_station, env_ontology, depth, depth_min, depth_max, date_time)
```

Later it will make our lives easier if there are actual values for these depths and not NAs. We fill these depths with the mean of the depth range.

Also in some cases nutrients or sensor data will not be joined even though there is a measurement at that particular station/depth. We will group by station and depth and then fill those observations from the same station/depth. 

```{r}
tara_biosamples_joined02 <- tara_biosamples_joined01 %>% 
  mutate(depth = if_else(is.na(depth), (depth_max - depth_min)/2, depth)) %>% 
  arrange(tara_station, depth) %>% 
  group_by(tara_station, depth, depth_min, depth_max) %>% 
  fill(20:last_col(), .direction = "downup") %>% 
  ungroup()
```

## Fill missing observations with "whole water column" data (PANGAEA.875579)

Now we will fill missing observations with direct observations taken from the "whole water column."

1. We will take bottle samples as the starting point (PANGAEA_875575)
2. If a bottle observation is missing fill with the closes CTD sensor observation (PANGAEA_875576)
3. If CTD sensor observation is missing fill with "whole water column" data (PANGAEA.875579). TBH I actually don't understand where this data comes from. The PI listed is Sabrina Speich who is different than the most common PIs (Pesant and Guidi). But from what I can tell this is not the output of a model but somehow a direct observation corresponding to a Tara station.
4. Finally, if none of the three above exist we will fill the data with the output from the MIT Darwin model.

This function creates a new variable replacing a variable from either PANGAEA_875575 or PANGAEA_875576 with the corresponding SRF/MIX/DCM/MES measurement from PANGAEA.875579

```{r}
replace_w_875579 <- function(.data, varname, target, srf, mix, dcm){
  .data %>% 
    mutate("{varname}" := if_else(!is.na({{ target }}), {{ target }},
          if_else(str_detect(env_ontology, "SRF"), {{ srf }},
                  if_else(str_detect(env_ontology, "MIX"), {{ mix }}, 
                          if_else(str_detect(env_ontology, "DCM"), {{ dcm }}, NA_real_)))))
}

simple_replace <- function(.data, varname, target, replace){
  .data %>% 
    mutate("{varname}" := if_else(is.na({{ target }}), {{ replace }}, {{ target }}))
}
```

Call the above function for each of the 10 variables of interest

```{r}
tara_biosamples_joined02_replaced <- tara_biosamples_joined02 %>%
  replace_w_875579("density",     PANGAEA.875576_047, PANGAEA.875579_074, PANGAEA.875579_077, PANGAEA.875579_079) %>% 
  replace_w_875579("temperature", PANGAEA.875576_027, PANGAEA.875579_064, PANGAEA.875579_067, PANGAEA.875579_069) %>% 
  replace_w_875579("salinity",    PANGAEA.875576_037, PANGAEA.875579_054, PANGAEA.875579_057, PANGAEA.875579_059) %>% 
  replace_w_875579("chl_a",       PANGAEA.875576_077, PANGAEA.875579_094, PANGAEA.875579_097, PANGAEA.875579_099) %>% 
  replace_w_875579("dO2",         PANGAEA.875576_057, PANGAEA.875579_104, PANGAEA.875579_107, PANGAEA.875579_109) %>% 
  replace_w_875579("DIN",         PANGAEA.875575_031, PANGAEA.875579_114, PANGAEA.875579_117, PANGAEA.875579_119) %>% 
    simple_replace("DIN",         DIN, PANGAEA.875577_045) %>% 
    simple_replace("NO2",         PANGAEA.875575_021, PANGAEA.875577_043) %>% 
  mutate(FeT = PANGAEA.875577_039, 
         PO4 = PANGAEA.875575_026,
         SiO2 = PANGAEA.875575_036) %>% 
  relocate(tara_barcode_num, tara_station, env_ontology, latitude, longitude, date_time, depth, depth_min, depth_max, 
           density, temperature, salinity, chl_a, dO2, DIN, NO2, FeT, PO4, SiO2)
```

Fix some stuff with dates

```{r}
statistical_mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

tara_biosamples_joined02_replaced <- tara_biosamples_joined02_replaced %>% 
  # convert the date_time to only date. This ensures that when you are grouping
  # by tara_station and date_time that you don't expand the results to include
  # multiple times within a single station
  mutate(date_time = lubridate::as_date(stringr::str_extract(date_time, "^\\d{4}-\\d{2}-\\d{2}"))) %>% 
  group_by(tara_station) %>% 
  # in the case that there are multiple days sampled at a station take the most
  # common day to represent the whole station
  mutate(date_time = statistical_mode(date_time)) %>% 
  ungroup()
```

Now after we have filled observations with data internally available from the Tara Pangaea collection, we need to find which stations still have missing data observations for one or more these variables.

```{r}
target_vars <- c("density", "temperature", "salinity", "chl_a", "dO2", "DIN", "NO2", "FeT", "PO4", "SiO2")

missing <- tara_biosamples_joined02_replaced %>% 
  filter(if_any(all_of(target_vars), is.na)) %>%
  summarise(across(all_of(target_vars), ~any(is.na(.))),
            .by = c(tara_station, env_ontology, depth, depth_min, depth_max, latitude, longitude, date_time))
```

Most missing observations are because of PO4 and SiO2

```{r}
missing %>% 
  summarize(across(all_of(target_vars), sum))
```

And this is for 56 different tara stations

```{r}
distinct(missing, tara_station) %>% 
  count()
```

This level of completion is pretty OK I think... To replace the missing fields I will use modeled variables from the MIT Darwin model. These can be obtained from [Simons CMAP.](https://simonscmap.com/)

Set the api-key for CMAP. This allows your R session to communicate with their backend database. You will need to get your own key following instructions [here](https://simonscmap.com/apikeymanagement).

```{r}
#| echo: true
#| eval: false
#| output: false
library(cmap4r)
cmap4r::set_authorization(reset = TRUE)
cmap4r::set_authorization(cmap_key = "KEY-GOES-HERE")
```

Download a local copy of the CMAP catalog. Useful for querying later...

```{r}
#| echo: true
#| eval: false
#| output: false
local_cat <- cmap4r::get_catalog() %>%
  select(Variable, Table_Name, Unit, Sensor, Unit)

write_tsv(local_cat, here::here("_data_raw", "cmap", "cmap_catalog.tsv"))
```

```{r}
#| echo: false
#| eval: true
#| output: false
local_cat <- read_tsv(here::here("_data_raw", "cmap", "cmap_catalog.tsv"))
```

## Fill missing observations with Darwin model Nutrients output

### Darwin coordinates for nutrients

CMAP has some select nutrient concentrations available from the [3-day averagedDarwin Model output](https://simonscmap.com/catalog/datasets/Darwin_Nutrient). These include

```{r}
local_cat %>% 
  filter(Table_Name == "tblDarwin_Nutrient")
```

Not exactly clear what the units are for these nutrients, but my guess is mmol m-3 since most other concentration units are per 1 m3 unit volume.

Now we will get only the stations with missing nutrients in `tblDarwin_Nutrient`

```{r}
missing_nuts <- missing %>% 
  tidyr::pivot_longer(c(-tara_station, -env_ontology, -depth, -depth_min, -depth_max, -latitude, -longitude, -date_time)) %>% 
  dplyr::filter(value == TRUE) %>% 
  dplyr::select(tara_station, env_ontology, latitude, longitude, date_time, depth, depth_min, depth_max) %>% 
  dplyr::distinct()
```

Now retrieve parameters from these stations that can be used to query CMAP database. We need a start latitude, ending latitude, starting longitude, ending longitude, starting depth, ending depth, and starting date and ending date. Note: here we don't bother with depths because when you query all the variables in the CMAP database it returns all depths regardless of what you provide to the function (bug? feature?)

```{r}
coord_range <- function(x, f, offset, negate = FALSE){
  return(if_else(negate, -(f(max(abs(x))) + offset), f(max(abs(x))) + offset))
}

missing_nuts_nested <- missing_nuts %>% 
  group_by(tara_station) %>% 
  mutate(lat1 = if_else(latitude < 0,   coord_range(latitude, ceiling, 1, TRUE),  coord_range(latitude, floor, -1, FALSE)),
         lat2 = if_else(latitude < 0,   coord_range(latitude, floor, -1, TRUE),   coord_range(latitude, ceiling, 1, FALSE)),
         lon1 = if_else(longitude < 0,  coord_range(longitude, ceiling, 1, TRUE),  coord_range(longitude, floor, -1, FALSE)),
         lon2 = if_else(longitude < 0,  coord_range(longitude, floor, -1, TRUE), coord_range(longitude, ceiling, 1, FALSE))) %>%
  dplyr::mutate(dt1 = floor_date(date_time, 'month'),
                dt2 = ceiling_date(date_time, 'month')) %>% 
  ungroup() %>% 
  nest(original_data = c(env_ontology:depth_max)) %>% 
  nest(dw_query = c(lat1:dt2))
```


Now make the call querying the CMAP remote database. This maps a separate call to every unique missing Tara Station. Even though this isn't very efficient it is faster and takes less space that just downloaded the Darwin output for the entire ocean and then later filtering to the coordinates of interest.

```{r}
#| echo: true
#| eval: false
#| output: false
missing_nuts_nested_darwin <- missing_nuts_nested %>% 
  mutate(
    tbl = map(
      dw_query,
      function(df) cmap4r::get_spacetime(
        tableName = 'tblDarwin_Nutrient',
        varName = '*',
        dt1 = as.character(df$dt1),
        dt2 = as.character(df$dt2),
        lat1 = df$lat1,
        lat2 = df$lat2,
        lon1 = df$lon1,
        lon2 = df$lon2)))

# save this for later to speed up quarto renders
write_rds(missing_nuts_nested_darwin, here::here("_data_raw", "tara", "cmap_missing_nuts.rds"))
```

```{r}
#| echo: false
#| eval: true
#| output: false
missing_nuts_nested_darwin <- read_rds(here::here("_data_raw", "tara", "cmap_missing_nuts.rds"))
```

### Filter Darwin output to Tara coordinates

Now we need to whittle down the Darwin model output to only the time, depth, and coordinates of interest. We do this by 

1. Fuzzy joining on latitude and longitude using `fuzzyjoin::geo_inner_join`. Briefly this calculates the [Haversine distance](https://en.wikipedia.org/wiki/Haversine_formula) between two sets of coordinates and keeps only those with distance magnitude less than `max_dist` (here we set this to 65 kilometers). This allows us to keep only coordinates that are as close as possible to the sampled Tara coordinates. Later we select for the smallest Haversine distance to select a point from the model grid that is closest to the Tara station. Sometimes these coordinates will be a land cell on the Darwin grid and will return NAs so we use `drop_na` to only include coordinates in the ocean with nutrients.
2. Next we calculate the duration of time between the Tara observation and the time step from the Darwin Model. Note this is the 3-day averaged model output. We then filter to only include model output that is closest in time (shortest duration) to the Tara observation.
3. Finally, we need to make a measure of the distance between the sampled Tara depth and the model output depth. In the upper 250 the depth is high resolution so usually we find a depth between `depth_min` and `depth_max` in the model output. Deeper in the ocean the model output is only every 100 meters or more so we need to filter on the smallest possible difference from the Tara depth

```{r}
missing_nuts_nested_darwin_filtered <- missing_nuts_nested_darwin %>% 
  # unnest on the Darwin output. expand rows per Tara Station
  unnest(tbl) %>%
  # select only relevant columns to make management easier
  dplyr::select(tara_station, 
                date_time = time, latitude = lat, longitude = lon, depth,
                PO4_dw = PO4, SiO2_dw = SiO2, O2_dw = O2) %>%
  # fuzzy join the Darwin output to the coordinates of missing data using the 
  # haversine distance and excluding joins that exceed 65 km in distance apart
  fuzzyjoin::geo_inner_join(missing_nuts,
                            by = c("latitude", "longitude"),
                            distance_col = "geojoin_dist_km",
                            max_dist = 65) %>% 
  # narrow down the data so we only consider matching Tara stations from the two datasets
  filter(tara_station.x == tara_station.y) %>%
  # exclude any Darwin observations that have NAs for PO4, SiO2, or O2 (these are genarally land grids or seafloor)
  filter(!(is.na(PO4_dw) & is.na(SiO2_dw) & is.na(O2_dw))) %>% 
  # Group by unique variables for each Tara observation
  group_by(tara_station.y, env_ontology, depth.y, depth_min, depth_max) %>% 
  # Filter to include only matches with smallest distance between Darwin grid and the coords of the direct observation
  filter(geojoin_dist_km == min(geojoin_dist_km)) %>% 
  # do some type conversions for dates to allow subsequent calculations
  mutate(date_time.x = lubridate::as_date(date_time.x),
         date_time.y = lubridate::as_date(stringr::str_extract(date_time.y, "^\\d{4}-\\d{2}-\\d{2}"))) %>% 
  # calculate the difference between the model output (3-day interval) and the sampling time of the direct observation
  mutate(time_diff = as.duration(abs(interval(date_time.x, date_time.y)))) %>% 
  # filter to only include matches with the smallest time difference
  filter(time_diff == min(time_diff)) %>% 
  # filter to only include matches with the smallest depth difference
  filter(abs(depth.y - depth.x) == min(abs(depth.y - depth.x))) %>% 
  ungroup() %>% 
  dplyr::select(tara_station = tara_station.y, 
                depth = depth.y, depth_min, depth_max, env_ontology,
                latitude = latitude.y, longitude = longitude.y, PO4_dw, SiO2_dw, O2_dw) %>%
  # take mean of multi-observations (e.g. if the real depth is 4, the closest
  # depths from Darwin are 35 and 45 so we average the concentration from the
  # two flanking depths)
  summarize(across(PO4_dw:O2_dw, mean), 
            .by = c(tara_station:longitude))
```

### Join observed and Darwin Model output into single dataframe

```{r}
tara_biosamples_joined02_replaced02 <- left_join(tara_biosamples_joined02_replaced, missing_nuts_nested_darwin_filtered, 
          by = join_by(tara_station, env_ontology, latitude, longitude, depth, depth_min, depth_max)) %>% 
  simple_replace("SiO2", SiO2, SiO2_dw) %>%
  simple_replace("dO2",  dO2, O2_dw) %>%
  simple_replace("PO4",  PO4, PO4_dw)
```

## Impute remaining missing observations

```{r}
library(missRanger)
```

There are three Tara stations with missing observations. `TARA_011` is missing chl_a, density, salinity and temperature, while the others are missing only chl_a

```{r}
missing %>% 
  dplyr::select(tara_station:chl_a) %>%
  tidyr::pivot_longer(c(-tara_station, -env_ontology, -depth, -depth_min, -depth_max, -latitude, -longitude, -date_time)) %>% 
  dplyr::filter(value == TRUE) %>% 
  group_by(tara_station, name) %>% 
  count(value) %>% 
  arrange(name)
```

Since this is only a few missing observations, we are going to impute them using the [`missRanger` package](https://mayer79.github.io/missRanger/index.html), which uses the [`missForest` random forest imputation approach.](https://doi.org/10.1093/bioinformatics/btr597)

First only subset variables of interest and make the data unique

```{r}
tara_biosamples_joined02_replaced02_uniq <- tara_biosamples_joined02_replaced02 %>% 
  dplyr::select(tara_station:SiO2) %>% 
  distinct()
```

Run the missRanger algorithm to impute missing values. We impute density, temperature, salinity, chl_a by depth, density, temperature, salinity, chl_a, dO2, DIN, NO2, FeT, PO4, SiO2

```{r}
#| output: false
# set seed for reproducibility
set.seed(35782)
tara_biosamples_joined02_replaced02_uniq_rangerd <- missRanger::missRanger(tara_biosamples_joined02_replaced02_uniq, 
                                                                           . ~ . - tara_station - env_ontology - latitude - longitude - date_time - depth_min - depth_max, pmm.k = 10, num.trees = 500)
```

## Joining and replacing missing values with those imputed 

First get only the samples that needed salinity, temp, density, chl_a replaced from the imputed dataset 

```{r}
tara_biosamples_joined02_replaced02_uniq_imputed <- tara_biosamples_joined02_replaced02_uniq %>% filter(if_any(everything(), is.na)) %>% select(tara_station:depth_max)

tara_biosamples_envdata_01 <- inner_join(tara_biosamples_joined02_replaced02_uniq_rangerd, tara_biosamples_joined02_replaced02_uniq_imputed,
           by = join_by(tara_station, env_ontology, latitude, longitude, date_time, depth, depth_min, depth_max))
```

Next join those imputed samples to the full `tara_biosamples_joined02_replaced02` table

```{r}
tara_biosamples_envdata_02 <- right_join(tara_biosamples_envdata_01, tara_biosamples_joined02_replaced02,
              by = join_by(tara_station, env_ontology, latitude, longitude, date_time, depth, depth_min, depth_max))
```

### Detour to add some additional geographic info

Next we want to add some geographic information to the dataset like longhurst code, ocean identifier, and the distance to the coast. We will calculate the distance to the nearest coast using [`ggOceanMaps::dist2land`](https://mikkovihtakari.github.io/ggOceanMaps/reference/dist2land.html). [Inspired by this blogpost](https://blogs.ubc.ca/yiwang28/2024/01/06/my-r-learning-notes-3-how-to-calculate-the-shortest-distance-to-coast/)

```{r}
#| output: false
library(ggOceanMaps)
library(rnaturalearth)
library(sf)
```

Load coastline data at the largest most coarse scale (110) and also subset `PANGAEA_842237` to only coordinates and station identifier

```{r}
coast <- rnaturalearth::ne_coastline(scale=110, returnclass = "sf")
data <- dplyr::select(PANGAEA_842237, tara_station, latitude, longitude, )
```

Plot to check 

```{r}
plot(coast['featurecla'])
```
This function calculates great circle spherical distances (in kilometers) from a coordinate in the ocean to the nearest coastline using the [`st_distance`](https://r-spatial.github.io/sf/reference/geos_measures.html) function.

```{r}
dist2land_df <- ggOceanMaps::dist2land(data, shapefile = coast) %>% 
  dplyr::select(tara_station, dist_to_coastline = ldist)
```

Join the distance to coastline to other general large scale features like longhurst provinces

```{r}
ocean_feats_df <- PANGAEA_842237 %>%
  dplyr::select(tara_station, ocean_id = PANGAEA.842237_016, longhurst_biome = PANGAEA.842237_015, 
                longhurst_code = PANGAEA.842237_018, bathy_depth = PANGAEA.842237_012) %>% 
  left_join(dist2land_df, by = join_by(tara_station))
```

### Finalize

Now do the final joining to the full imputed data set, replace missing values with the imputed values, and select key variables

```{r}
tara_biosamples_envdata_final <- left_join(tara_biosamples_envdata_02, ocean_feats_df, by = join_by(tara_station)) %>% 
  simple_replace("density", density.y, density.x) %>% 
  simple_replace("salinity", salinity.y, salinity.x) %>%
  simple_replace("temperature", temperature.y, temperature.x) %>%
  simple_replace("chl_a", chl_a.y, chl_a.x) %>% 
  select(tara_barcode_num, sra_acc_num:ena_acc_num, tara_station:date_time, size_low_thresh, size_high_thresh,
         ocean_id, longhurst_code, longhurst_biome, bathy_depth, dist_to_coastline,
         depth:depth_max, temperature, salinity, density, chl_a,
         dO2 = dO2.y, DIN = DIN.y, NO2 = NO2.y, FeT = FeT.y, PO4 = PO4.y, SiO2 = SiO2.y)
```

Final check to see if there is missing entries in this dataframe - good to go

```{r}
tara_biosamples_envdata_final %>% 
  filter(if_any(everything(), is.na))
```
Save for later

```{r}
write_tsv(tara_biosamples_envdata_final, here::here("data", "tara", "tara_biosamples_envdata_final.tsv"))
```
